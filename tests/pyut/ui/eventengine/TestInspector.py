
from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.UnitTestBase import UnitTestBase

from pyut.ui.eventengine.inspector.Inspector import Inspector


class Class1:
    def __init__(self):
        self._calledBy: str = ''

    def method1(self):
        print('method1 called')
        self._calledBy = Inspector.getCallerName()

    @property
    def calledBy(self) -> str:
        return self._calledBy


class Class2:
    def __init__(self):
        self._class1: Class1 = Class1()

    def method2(self):
        self._class1.method1()

    @property
    def class1(self) -> Class1:
        return self._class1


class TestInspector(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 16 December 2024
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def testBasicInspection(self):
        class2: Class2 = Class2()

        class2.method2()

        # noinspection SpellCheckingInspection
        expectedCaller: str = 'tests.pyut.ui.eventengine.TestInspector.Class2.method2'
        self.assertEqual(expectedCaller, class2.class1.calledBy, 'Incorrect')

    def testJustClassMethodName(self):

        fullyQualifiedName: str = 'pyut.ui.main.PyutApplicationFrame.PyutApplicationFrame._initialize'
        expectedShortName:  str = 'PyutApplicationFrame._initialize'

        actualShortName:    str = Inspector.justClassMethodName(fullyQualifiedName)

        self.assertEqual(expectedShortName, actualShortName, 'Not correctly shortened')


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestInspector))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
